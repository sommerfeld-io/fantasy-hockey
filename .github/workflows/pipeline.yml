---
# @file pipeline.yml
# @brief Deployment pipeline for the Fantasy Hockey application.
#
# @description ...
# TODO ...This will become a deployment pipeline the way Dave Farley thinks of this.


name: Deployment Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 3 * * 1' # https://crontab.guru/#0_2_*_*_1

env:
  REGISTRY: docker.io
  REGISTRY_USER: ${{ secrets.DOCKERHUB_USER }}
  REGISTRY_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: fantasy-hockey-app
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest

permissions:
  contents: read

jobs:

  # ----- Commit stage --------------------------

  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run yamllint
        run: make lint-yaml
        shell: bash

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run folderslint in container
        run: make lint-folders
        shell: bash

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ls-lint in container
        run: make lint-filenames
        shell: bash

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint-makefile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run checkmake in container
        run: make lint-makefile
        shell: bash

  build-app:
    runs-on: ubuntu-latest
    needs: ['lint-yaml', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-makefile']
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: components/app/Dockerfile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Build the Docker image and push to ${{ env.REGISTRY }}
        uses: docker/build-push-action@v5
        with:
          context: components/app
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      - name: Docker Scout CVEs for :${{ github.sha }}
        uses: docker/scout-action@v1.3.0
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          exit-code: false
          write-comment: ${{ github.event_name == 'pull_request' }}
      - name: Docker Scout Compare :${{ github.sha }} to :${{ env.IMAGE_TAG_RC }}"
        uses: docker/scout-action@v1.3.0
        with:
          command: compare
          image: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          to: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}
          exit-code: false
          write-comment: ${{ github.event_name == 'pull_request' }}

  # ----- Test stage ----------------------------

  # todo ... inspec and all other tests
  # todo ... https://github.com/sommerfeld-io/fantasy-hockey/issues/12

  inspec:
    runs-on: ubuntu-latest
    needs: ['build-app']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  # ----- Deploy :rc stage ----------------------

  publish-rc:
    runs-on: ubuntu-latest
    needs: ['inspec']
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}
      - name: Re-tag image as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to ${{ env.REGISTRY }}
        run: |
          SRC_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}"
          docker pull "$SRC_IMAGE"
          docker tag "$SRC_IMAGE" "$TARGET_IMAGE"
          docker push "$TARGET_IMAGE"
        shell: bash
      # todo ... https://github.com/sommerfeld-io/fantasy-hockey/issues/17
      # - name: Docker Scout Compare :${{ env.IMAGE_TAG_RC }}" to :${{ env.IMAGE_TAG_LATEST }}
      #   uses: docker/scout-action@v1.3.0
      #   with:
      #     command: compare
      #     image: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}
      #     to: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
      #     exit-code: false
      #     write-comment: ${{ github.event_name == 'pull_request' }}

  # ----- Notifications -------------------------

  on-failure:
    runs-on: ubuntu-latest
    needs: [
      'lint-yaml',
      'lint-folders',
      'lint-filenames',
      'shellcheck',
      'lint-makefile',
      'build-app',
      'inspec',
      'publish-rc',
    ]
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
